<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bzs.dao.AccountInfoMapper">
    <resultMap id="BaseResultMap" type="com.bzs.model.AccountInfo">
        <!--
          WARNING - @mbg.generated
        -->
        <result column="account_id" jdbcType="VARCHAR" property="accountId"/>
        <result column="role_id" jdbcType="VARCHAR" property="roleId"/>
        <result column="role_name" jdbcType="VARCHAR" property="roleName"/>
        <result column="parent_id" jdbcType="VARCHAR" property="parentId"/>
        <result column="ancestor_id" jdbcType="VARCHAR" property="ancestorId"/>
        <result column="account_state" jdbcType="INTEGER" property="accountState"/>
        <result column="login_name" jdbcType="VARCHAR" property="loginName"/>
        <result column="login_pwd" jdbcType="VARCHAR" property="loginPwd"/>
        <result column="user_name" jdbcType="VARCHAR" property="userName"/>
        <result column="area_code" jdbcType="VARCHAR" property="areaCode"/>
        <result column="mobile" jdbcType="VARCHAR" property="mobile"/>
        <result column="id_card" jdbcType="VARCHAR" property="idCard"/>
        <result column="wechat" jdbcType="VARCHAR" property="wechat"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="delete_status" jdbcType="TINYINT" property="deleteStatus"/>
        <result column="UPDATED_BY" jdbcType="VARCHAR" property="updatedBy"/>
        <result column="CREATED_BY" jdbcType="VARCHAR" property="createdBy"/>
        <result column="superior" jdbcType="VARCHAR" property="superior"/>
        <result column="login_time" jdbcType="TIMESTAMP" property="loginTime"/>
        <result column="CREATED_TIME" jdbcType="TIMESTAMP" property="createdTime"/>
        <result column="UPDATED_TIME" jdbcType="TIMESTAMP" property="updatedTime"/>
        <result column="inviteCode" jdbcType="INTEGER" property="invitecode"/>
        <result column="superiorInviteCode" jdbcType="INTEGER" property="superiorinvitecode"/>
        <result column="invite_code_level" jdbcType="INTEGER" property="inviteCodeLevel"/>
        <result column="association_level" jdbcType="VARCHAR" property="associationLevel"/>
        <result column="balance_total" jdbcType="DECIMAL" property="balanceTotal"/>
        <result column="commission_total" jdbcType="DECIMAL" property="commissionTotal"/>
        <result column="draw_percentage_total" jdbcType="DECIMAL" property="drawPercentageTotal"/>

    </resultMap>
    <select id="login" resultMap="BaseResultMap">
        select * from account_info
        <where>
            login_name=#{loginName}
        </where>
    </select>

    <select id="getRoleIdByAccountId" resultType="String">
      select role_id from account_id where account_id=#{account_id}
    </select>

    <select id="getUserInfo" resultType="map">
        SELECT
            account_info.account_id,
            account_info.role_id,
            account_info.role_name,
            account_info.parent_id,
            account_info.ancestor_id,
            account_info.account_state,
            account_info.login_name,
            account_info.login_pwd,
            account_info.user_name,
            account_info.area_code,
            account_info.mobile,
            account_info.id_card,
            account_info.wechat,
            account_info.email,
            account_info.delete_status,
            account_info.UPDATED_BY,
            account_info.CREATED_BY,
            account_info.REVISION,
            account_info.CREATED_TIME,
            account_info.UPDATED_TIME,
            account_info.superiorInviteCode,
            account_info.inviteCode,
            account_info.superior
            FROM
            account_info
            where
            account_info.login_name = #{username},
            account_info.login_pwd = #{password},
            account_info.delete_status = 0,
    </select>
    <select id="getUserList" resultType="map">
        SELECT
        account_info.account_id,
        account_info.role_id,
        account_info.role_name,
        account_info.parent_id,
        account_info.ancestor_id,
        account_info.account_state,
        account_info.login_name,
        account_info.login_pwd,
        account_info.user_name,
        account_info.area_code,
        account_info.mobile,
        account_info.id_card,
        account_info.wechat,
        account_info.email,
        account_info.delete_status,
        account_info.UPDATED_BY,
        account_info.CREATED_BY,
        account_info.CREATED_TIME,
        account_info.UPDATED_TIME,
        account_info.superiorInviteCode,
        account_info.superior,
        account_info.inviteCode
        FROM
        account_info
        <where>
            <if test="roleId!=null and roleId!='' ">
                <if test="roleId==1">
                </if>
                <if test="roleId==2">
                </if>
                <if test="roleId==3">
                    <if test="accountId!=null and accountId!=''">account_info.parent_id = #{accountId}</if>
                </if>
            </if>
        </where>
    </select>
    <!--查询 账号和对应的第三方账号 开始-->
    <resultMap extends="BaseResultMap" id="accountAndThridAccountResultMap"
               type="com.bzs.model.query.AccountAndThirdAccount">
        <collection columnPrefix="b_" ofType="com.bzs.model.ThirdInsuranceAccountInfo" property="thridAccounts"
                    resultMap="com.bzs.dao.ThirdInsuranceAccountInfoMapper.BaseResultMap"/>
    </resultMap>
    <select id="getAccountAndThridAccount" parameterType="com.bzs.model.AccountInfo"
            resultMap="accountAndThridAccountResultMap">
        select
        a.* ,
        b.third_insurance_id as b_third_insurance_id,
        b.account_id as b_account_id
        from account_info a
        left join third_insurance_account_info b
        on a.account_id = b.account_id
        <if test="accountId!=null and accountId!=''">where a.account_id=#{accountId}</if>
    </select>
    <!--查询 账号和对应的第三方账号 结束-->
    <!-- 根据id 存在则更新不存在则修改 开始-->
    <sql id="insertItems">
        <trim prefix="(" suffix=")" suffixOverrides=",">
            account_id,
            <if test="roleId!=null and ''!=roleId ">role_id,</if>
            <if test="roleName!=null and ''!=roleName ">role_name,</if>
            <if test="parentId!=null and ''!=parentId ">parent_id,</if>
            <if test="ancestorId!=null and ''!=ancestorId ">ancestor_id,</if>
            <if test="accountState!=null and ''!=accountState ">account_state,</if>
            <if test="loginName!=null and ''!=loginName ">login_name,</if>
            <if test="loginPwd!=null and ''!=loginPwd ">login_pwd,</if>
            <if test="userName!=null and ''!=userName ">user_name,</if>
            <if test="areaCode!=null and ''!=areaCode ">area_code,</if>
            <if test="mobile!=null and ''!=mobile ">mobile,</if>
            <if test="idCard!=null and ''!=idCard ">id_card,</if>
            <if test="wechat!=null and ''!=wechat ">wechat,</if>
            <if test="email!=null and ''!=email ">email,</if>
            <if test="deleteStatus!=null and ''!=deleteStatus ">delete_status,</if>
            <if test="updatedBy!=null and ''!=updatedBy ">UPDATED_BY,</if>
            <if test="createdBy!=null and ''!=createdBy ">CREATED_BY,</if>
            <if test="loginTime!=null and ''!=loginTime ">login_time,</if>
            <if test="createdTime!=null and ''!=createdTime ">CREATED_TIME,</if>
            <if test="updatedTime!=null and ''!=updatedTime ">UPDATED_TIME,</if>
        </trim>
    </sql>
    <sql id="insertValues">
        <trim prefix="(" suffix=")" suffixOverrides=",">
            #{accountId},
            <if test="roleId!=null and ''!=roleId ">#{roleId},</if>
            <if test="roleName!=null and ''!=roleName ">#{roleName},</if>
            <if test="parentId!=null and ''!=parentId ">#{parentId},</if>
            <if test="ancestorId!=null and ''!=ancestorId ">#{ancestorId},</if>
            <if test="accountState!=null and ''!=accountState ">#{accountState},</if>
            <if test="loginName!=null and ''!=loginName ">#{loginName},</if>
            <if test="loginPwd!=null and ''!=loginPwd ">#{loginPwd},</if>
            <if test="userName!=null and ''!=userName ">#{userName},</if>
            <if test="areaCode!=null and ''!=areaCode ">#{areaCode},</if>
            <if test="mobile!=null and ''!=mobile ">#{mobile},</if>
            <if test="idCard!=null and ''!=idCard ">#{idCard},</if>
            <if test="wechat!=null and ''!=wechat ">#{wechat},</if>
            <if test="email!=null and ''!=email ">#{email},</if>
            <if test="deleteStatus!=null and ''!=deleteStatus ">#{deleteStatus},</if>
            <if test="updatedBy!=null and ''!=updatedBy ">#{updatedBy},</if>
            <if test="createdBy!=null and ''!=createdBy ">#{createdBy},</if>
            <if test="loginTime!=null and ''!=loginTime ">#{loginTime},</if>
            <if test="createdTime!=null and ''!=createdTime ">#{createdTime},</if>
            <if test="updatedTime!=null and ''!=updatedTime ">#{updatedTime},</if>
        </trim>
    </sql>
    <insert id="addOrUpdate" parameterType="com.bzs.model.AccountInfo">
        insert into account_info
        <include refid="insertItems"/>
        values
        <include refid="insertValues"/>
        ON DUPLICATE KEY UPDATE
        <trim suffixOverrides=",">
            <if test="parentId!=null and ''!=parentId ">parent_id=#{parentId},</if>
            <if test="ancestorId!=null and ''!=ancestorId ">ancestor_id=#{ancestorId},</if>
            <if test="accountState!=null or accountState==0 ">account_state=#{accountState},</if>
            <if test="loginName!=null and ''!=loginName ">login_name=#{loginName},</if>
            <if test="loginPwd!=null and ''!=loginPwd ">login_pwd=#{loginPwd},</if>
            <if test="userName!=null and ''!=userName ">user_name=#{userName},</if>
            <if test="areaCode!=null and ''!=areaCode ">area_code=#{areaCode},</if>
            <if test="mobile!=null and ''!=mobile ">mobile=#{mobile},</if>
            <if test="idCard!=null and ''!=idCard ">id_card=#{idCard},</if>
            <if test="wechat!=null and ''!=wechat ">wechat=#{wechat},</if>
            <if test="email!=null and ''!=email ">email=#{email},</if>
            <if test="deleteStatus!=null and ''!=deleteStatus ">delete_status=#{deleteStatus},</if>
            <if test="updatedBy!=null and ''!=updatedBy ">UPDATED_BY=#{updatedBy},</if>
            <if test="createdBy!=null and ''!=createdBy ">CREATED_BY=#{createdBy},</if>
            <if test="loginTime!=null and ''!=loginTime ">login_time=#{loginTime},</if>
            <if test="updatedTime!=null and ''!=updatedTime ">UPDATED_TIME=#{updatedTime},</if>
        </trim>
    </insert>
    <!--根据id 存在则更新不存在则修改 结束-->
    <!--获取父节点信息-->
    <select id="getParentList" resultMap="BaseResultMap">
        select * from account_info where FIND_IN_SET(account_id,getAccountInfoParentList(#{id},#{deep}))
        <if test="isOwner=='1'">and account_id!=#{id}</if>
    </select>
    <!--获取子节点信息-->
    <select id="getChildList" resultMap="BaseResultMap">
        select * from account_info where FIND_IN_SET(account_id,getAccountInfoChildList(#{id},#{deep}))
        <if test="isOwner=='1'">and account_id!=#{id}</if>
    </select>
    <select id="getParentOrChildList" resultMap="BaseResultMap">
        select * from account_info
        <choose>
            <when test='type=="0"'>
                where FIND_IN_SET(account_id,getAccountInfoChildList(#{id},#{deep}))
            </when>
            <otherwise>
                where FIND_IN_SET(account_id,getAccountInfoParentList(#{id},#{deep}))
            </otherwise>
        </choose>
        <if test='isOwner=="1"'>and account_id!=#{id}</if>
        <if test="accountState!=9">and account_state=#{accountState}</if>
    </select>
    <select id="getAllCode" resultType="int">
        select inviteCode from account_info
    </select>
    <!--获取2层父级-->
    <resultMap id="SeveralAccount" type="com.bzs.model.query.SeveralAccount">
        <result column="account_id" jdbcType="VARCHAR" property="accountId"/>
        <result column="user_name" jdbcType="VARCHAR" property="userName"/>
        <result column="bName" jdbcType="VARCHAR" property="bUserName"/>
        <result column="bAccountId" jdbcType="VARCHAR" property="bAccountId"/>
        <result column="cName" jdbcType="VARCHAR" property="cUserName"/>
        <result column="cAccountId" jdbcType="VARCHAR" property="cAccountId"/>
        <result column="balance_total" jdbcType="DECIMAL" property="balanceTotal"/>
        <result column="commission_total" jdbcType="DECIMAL" property="commissionTotal"/>
        <result column="bBalanceTotal" jdbcType="DECIMAL" property="bBalanceTotal"/>
        <result column="bDrawPercentageTotal" jdbcType="DECIMAL" property="bDrawPercentageTotal"/>
        <result column="cBalanceTotal" jdbcType="DECIMAL" property="cBalanceTotal"/>
        <result column="cDrawPercentageTotal" jdbcType="DECIMAL" property="cDrawPercentageTotal"/>
        <result column="level" jdbcType="INTEGER" property="level"/>
        <result column="level1" jdbcType="INTEGER" property="level1"/>
        <result column="level2" jdbcType="INTEGER" property="level2"/>


    </resultMap>
    <select id="getParentLevel" resultMap="SeveralAccount">
        select a.user_name,
                a.account_id ,
                a.balance_total,
                a.commission_total,
                b.user_name as bName ,
                case  when a.account_id is null or a.account_id='' then 0 else 1 end level,
                case  when b.account_id is null or b.account_id='' then 0 else 1 end level1,
                case  when c.account_id is null or c.account_id='' then 0 else 1 end level2,
                b.balance_total as bBalanceTotal,
                b.draw_percentage_total as bDrawPercentageTotal,
                a.parent_id as bAccountId,
                c.user_name as cName ,
                c.account_id as cAccountId,
                c.balance_total as cBalanceTotal,
                c.draw_percentage_total as cDrawPercentageTotal
        from account_info a
        left join account_info b on b.account_id =a.parent_id
        left join account_info c on c.account_id =b.parent_id WHERE a.account_id=#{createBy}
    </select>
    <sql id="updateMoneyItems">
        <trim suffixOverrides="," prefix="set">
            <if test="balanceTotal!=null">balance_total=#{balanceTotal},</if>
            <if test="commissionTotal!=null">commission_total=#{commissionTotal},</if>
            <if test="drawPercentageTotal!=null">draw_percentage_total=#{drawPercentageTotal},</if>
        </trim>
    </sql>
    <update id="updateMoney">
        update account_info
        <include refid="updateMoneyItems"/>
        where account_id=#{accountId}
    </update>
    <!--获取收益-->
    <select id="getWithdraw" resultMap="BaseResultMap">
        select * from account_info
        <where>
            account_id=#{accountId}
        </where>
    </select>
    <!--删除用户-->
    <update id="deleteUser">
        update account_info set delete_status=#{status} where account_id in
        <foreach item="item" collection="accountId" separator="," open="(" close=")">
            #{item}
        </foreach>
    </update>
    <!--修改用户状态-->
    <update id="updateAccountStat">
         update account_info set account_state=#{status} where account_id=#{accountId}
    </update>

    <select id="getUserListByAdmin" resultType="map">
        SELECT
            a.account_id as accountId,
            a.role_id,
            a.role_name,
            a.parent_id,
            a.ancestor_id,
            a.account_state as accountState,
            a.login_name as loginName,
            a.login_pwd as loginPwd,
            a.user_name as userName,
            a.area_code,
            a.mobile,
            a.id_card,
            a.wechat,
            a.email,
            a.delete_status,
            a.UPDATED_BY,
            a.CREATED_BY,
            a.login_time,
            a.CREATED_TIME,
            a.UPDATED_TIME,
            a.inviteCode,
            a.superiorInviteCode,
            a.superior,
            a.association_level,
            a.invite_code_level,
            a.balance_total,
            a.commission_total,
            a.draw_percentage_total,
            a1.user_name AS user_name1,
            a2.user_name AS user_name2,
            a1.account_id AS account_id1,
            a2.account_id AS account_id2
        FROM
            account_info a
        LEFT JOIN account_info a1 ON a.parent_id = a1.account_id
        LEFT JOIN account_info a2 ON a1.parent_id = a2.account_id
        <where>
            a.delete_status=0
            <if test="userName!=null and userName!=''">
              and  a.user_name LIKE CONCAT(CONCAT('%', #{userName}), '%');
            </if>
        </where>
    </select>

    <update id="updateAccount">
        update account_info a
        <trim prefix="set" suffixOverrides=",">
            <if test="userName!=null and userName!=''">a.user_name=#{userName}, </if>
            <if test="loginName!=null and loginName!=''">a.login_name=#{loginName}, </if>
            <if test="loginPwd!=null and loginPwd!=''">a.login_pwd=#{loginPwd}, </if>
            <if test="mobile!=null and mobile!=''">a.mobile=#{mobile}, </if>
            a.account_state=#{accountState}
        </trim>
        <where>
            account_id=#{accountId}
        </where>
    </update>

    <select id="getUserLoginName" resultType="String">
        select login_name from account_info
    </select>

    <!--获取添加第三方账号的用户名id-->
    <select id="getUserNameAndId" resultMap="BaseResultMap">
        select user_name,account_id from account_info <where>
        delete_status=0 and
        account_state=0
    </where>
    </select>
    <select id="getTodayLoginCount" resultType="int">
        select count(account_id) from account_info where datediff(login_time,now())=0
    </select>
</mapper>